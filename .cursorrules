You are an expert TypeScript/React developer focusing on the frontend of this project. You have deep knowledge of building modern web applications—particularly for LLM-powered agent systems and real-time communication. Your code should be production-ready, well-documented, and consistent with best practices for TypeScript and React development.

This project aims to provide a user-friendly interface for:
1. Building and customizing AI agents for various applications
2. Managing knowledge bases and document uploads
3. Configuring and monitoring agent behaviors
4. Facilitating agent sharing and collaboration within the community

The frontend is built with:
- **React** for component-based UI development
- **TypeScript** for type-safe code
- **Tailwind CSS** for styling
- **pnpm** as the package manager
- **Vite** for fast development and building

## Project Context
The frontend application is designed to provide a rich user interface for agent management:
- Real-time agent interaction and monitoring
- Document upload and knowledge base management
- Tool configuration and customization
- WebSocket-based communication for live updates

## Coding Standards

### General Principles
- Follow **TypeScript** best practices with strict type checking
- Use **ESLint** and **Prettier** for consistent code style
- Write comprehensive **JSDoc** comments for components and functions
- Implement proper error boundaries and loading states
- Follow React best practices (hooks, memo, proper state management)

### Component Architecture
- Use functional components with hooks
- Implement proper prop typing and validation
- Separate business logic from UI components
- Use custom hooks for reusable logic
- Implement proper loading and error states

### State Management
- Use React Context for global state when appropriate
- Implement proper data fetching and caching strategies
- Handle WebSocket connections and real-time updates efficiently
- Use proper form state management (e.g., React Hook Form)

### Naming Conventions
- **Components**: `PascalCase` (e.g., `AgentCard.tsx`)
- **Hooks**: `camelCase` prefixed with 'use' (e.g., `useAgentState`)
- **Utils/Helpers**: `camelCase`
- **Constants**: `UPPER_SNAKE_CASE`
- **Files and Folders**: `kebab-case`
- **Interfaces/Types**: `PascalCase` (prefixed with 'I' for interfaces if preferred)

### Error Handling
- Implement proper error boundaries
- Use typed error handling with custom error classes
- Provide meaningful error messages to users
- Log errors appropriately for debugging
- Handle network errors and retries gracefully

## Project Structure
```
├── src/
│   ├── components/        # Reusable UI components
│   ├── hooks/            # Custom React hooks
│   ├── pages/            # Page components
│   ├── services/         # API and WebSocket services
│   ├── store/            # State management
│   ├── types/            # TypeScript types/interfaces
│   ├── utils/            # Utility functions
│   └── styles/           # Global styles and Tailwind config
├── public/               # Static assets
├── tests/               # Test files
└── package.json         # Project dependencies
```

### Key Features
1. **Agent Interface**
   - Agent creation and configuration
   - Real-time chat interface
   - Agent status monitoring
   - Performance metrics visualization

2. **Knowledge Base Management**
   - Document upload interface
   - Knowledge base organization
   - Search and filtering capabilities
   - Access control management

3. **Tool Configuration**
   - Tool selection interface
   - Configuration forms
   - Tool testing capabilities
   - Custom tool integration

4. **Monitoring & Analytics**
   - Agent performance dashboard
   - Usage statistics
   - Error monitoring
   - Activity logs

### UI/UX Guidelines
- Follow a consistent design system
- Implement responsive layouts
- Provide clear loading states and feedback
- Use proper form validation and error messages
- Implement proper accessibility features
- Support dark/light mode themes

### Performance Considerations
- Implement proper code splitting
- Use React.memo for expensive renders
- Optimize images and assets
- Implement proper caching strategies
- Monitor and optimize bundle size

### Testing Guidelines
- Write unit tests for components and hooks
- Implement integration tests for key flows
- Use proper mocking for external dependencies
- Test error states and edge cases
- Ensure proper accessibility testing

### Additional Notes
- After code changes, you don't need to run the pnpm dev or start command, the dev server is already running
- Use browser mcp to navigate to http://localhost:3000/ and perform testing
  - Use the #/lab page to access the lab interface
  - Use the #/chat page to access the chat interface
  - Use the #/agent page to access the agent interface
  - Use the #/settings page to access the settings interface
  - Use the #/admin page to access the admin interface

### Development Workflow
1. Follow Git branch naming conventions:
   - feature/feature-name
   - fix/bug-description
   - refactor/description
   - chore/task-description

2. Commit messages should be clear and descriptive:
   - feat: add new feature
   - fix: resolve issue
   - refactor: improve code structure
   - chore: update dependencies

3. Code Review Guidelines:
   - Check for type safety
   - Verify component composition
   - Review error handling
   - Ensure proper testing
   - Validate accessibility
   - Check performance implications
